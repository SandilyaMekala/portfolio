/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/glb/Sandy_Avatar.glb -o src/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGraph, useLoader, useFrame } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'
import * as THREE from 'three'

const visemes = {
  A: 'viseme_PP',
  B: 'viseme_FF',
  C: 'viseme_TH',
  D: 'viseme_DD',
  E: 'viseme_kk',
  F: 'viseme_CH',
  G: 'viseme_SS',
  H: 'viseme_AA',
  X: 'viseme_E',
  I: 'viseme_I',
  J: 'viseme_O',
  K: 'viseme_U',
  L: 'viseme_rest'
}

export function Avatar(props) {
  const audio = useMemo(() => new Audio(`${process.env.PUBLIC_URL}/audio/Introduction.mp3`), [])
  const jsonFile = useLoader(THREE.FileLoader, `${process.env.PUBLIC_URL}/audio/Introduction.json`)
  const lipsync = JSON.parse(jsonFile)

  useFrame(() => {
    const currentAudioTime = audio.currentTime
    
    Object.values(visemes).forEach((value) => {
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[value]
      ] = 0
      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[value]
      ] = 0
    })

    for (let i=0; i < lipsync.mouthCues.length; i++) {
      const mouthCue = lipsync.mouthCues[i];
      if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[visemes[mouthCue.value]]
        ] = 1
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[visemes[mouthCue.value]]
        ] = 1
        break
      }
    }
  })

  useEffect(() => {
    audio.play().catch((err) => {
      console.warn("Autoplay failed. Browser may require user interaction.", err);
    });

    return () => {
      audio.pause();
      audio.currentTime = 0;
    };
  }, [audio]);

  const { scene } = useGLTF(process.env.PUBLIC_URL + '/glb/Sandy_Avatar.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { animations: idleAnimation } = useFBX(process.env.PUBLIC_URL + '/animations/Idle.fbx');
  const { animations: greetingAnimation } = useFBX(process.env.PUBLIC_URL + '/animations/Greeting.fbx');

  idleAnimation[0].name = 'Idle';
  greetingAnimation[0].name = 'Greeting'
  
  const group = useRef();
  const { actions } = useAnimations(
    [idleAnimation[0], greetingAnimation[0]], group
  );

  useEffect(() => {
    if (!actions) return;

    actions['Greeting']?.reset().fadeIn(0.5).play();

    const timeout = setTimeout(() => {
      actions['Greeting']?.fadeOut(0.5);
      actions['Idle']?.reset().fadeIn(0.5).play();
    }, 5000);

    return () => clearTimeout(timeout);
  }, [actions]);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes['hair-60'].geometry} material={materials.M_Hair_60} skeleton={nodes['hair-60'].skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload(process.env.PUBLIC_URL + '/glb/Sandy_Avatar.glb')
